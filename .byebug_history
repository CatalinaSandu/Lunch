c
n
avatar
n
c
n
order
oder
n
c
Order.where(dish1_id: dish1_id, dessert_id: dessert_id).first!
n
menu
n
c
Order.where(dish1_id: dish1_id, dessert_id: dessert_id).first!
n
menu
n
c
dessert_id
Order.where(dish1_id: dish1_id, dessert_id: dessert_id).first!
n
menu
n
c
n
menu
n
menu
n
menu_id
menu_if
menu
n
c
menu.dishes.second.id
dish2_id
c
menu_id
menu
n
c
@order
menu_id
c
n
c
"http://#{request.host_with_port}#{user.avatar.url}"
n
request.host_with_port
c
request.url
"#{RAILS_ROOT}/public/#{user.avatar.url}"
user.avatar.url
user.avatar
n
c
n
c
n
c
permitted_params
permitted_params.delete :avatar
user
permitted_params.to_h
permitted_params
permittes_paramas
n
c
n
c
n
c
n
c
permitted_params
permitted_token
c
n
user
n
c
n
c
n
User.find_by_authentication_token(permitted_params[:token])
User.find(authentication_token: permitted_params[:token])
permitted_params[:token]
permitted_params
c
n
permitted_params.to_h
permitted_params
n
user
n
c
n
permitted_params.to_h
permitted_params.delete :token
permitted_params.to_h.class
permitted_params.to_h
permitted_params.class
permitted_params
n
c
e
n
c
e
n
c
n
e
n
e
n
attributes
n
declared(params, include_missing: false)
declared(params)
s
permitted_params
user
n
permitted_params
params
c
params
c
params
c
n
Time.zone.now
user
user.save
user.expires_at = "2016-09-20"
user.expires_at = 2016-09-21
user.expired?
user
n
token
c
user
n
user
c
n
c
n
c
avatar_path
n
params[:avatar][:filename]
params[:avatar][:headers]
params[:avatar][:filename]
new_file.headers.filename
new_file.headers
new_file.filename
new_file[:filename]
new_file
continue
attachement
c
params[:avatar][:filename]
new_file_path
new_file.headers
new_file
new_file.filename
c
new_file
c
avatar:params[new_file]
n
new_file
c
n
User
id
:id
Lid
c
n
c
status
n
menus(:one).id
c
JSON.parse(@response.body)['menu']['id']
JSON.parse(@response.body)
menus(:one).id
@token
JSON.parse(@response.body)['menu_id']
c
JSON.parse(@response.body)
JSON.parse(@response.body)['menu_id']
JSON.parse(@response.body)[:menu_id]
c
n
body['auth_token']
body[:auth_token]
body = JSON.parse(@response.body)
c
@token
body = JSON.parse(@response.body)
menus :one
menus
c
response.body
@response
response
n
c
n
c
n
users(:one)
c
users
c
n
c
response
status
n
c
order.user.email
order
c
order
c
order
c
n
c
n
c
n
c
main_app.root_path
admin_path
rails_admin_path
rails_admin
users_path
user_path
menus_path
menus
c
menus_path
c
n
root_path
n
current_user.try(:admin?)
current_user
